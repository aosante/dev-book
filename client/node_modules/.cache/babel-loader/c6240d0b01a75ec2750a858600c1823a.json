{"ast":null,"code":"var _jsxFileName = \"/Users/andresosante/Aosante/Web Portfolio/DevBook/client/src/components/profile/ProfileGithub.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({\n  username\n}) => {\n  const repos = useSelector(state => state.profile.repos);\n  const loading = useSelector(state => state.profile.loading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getGithubRepos(username)); // eslint-disable-next-line\n  }, [getGithubRepos, username]); // all this data is coming from the Github API and not the Mongo database\n\n  return React.createElement(\"div\", {\n    className: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Github Repos\"), repos.length === 0 && loading === false ? React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"No repos for this account\") : repos.length === 0 ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo.id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, repo.name)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, repo.description)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Stars: \", repo.stargazers_count), React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Watchers: \", repo.watchers_count), React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Forks: \", repo.forks_count))))));\n};\n\nProfileGithub.propTypes = {\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["/Users/andresosante/Aosante/Web Portfolio/DevBook/client/src/components/profile/ProfileGithub.jsx"],"names":["React","useEffect","PropTypes","connect","useSelector","useDispatch","getGithubRepos","Spinner","ProfileGithub","username","repos","state","profile","loading","dispatch","length","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","string","isRequired","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAMC,KAAK,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcF,KAA1B,CAAzB;AACA,QAAMG,OAAO,GAAGT,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcC,OAA1B,CAA3B;AAEA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACR,cAAc,CAACG,QAAD,CAAf,CAAR,CADc,CAEd;AACD,GAHQ,EAGN,CAACH,cAAD,EAAiBG,QAAjB,CAHM,CAAT,CANsC,CAWtC;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGC,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsBF,OAAO,KAAK,KAAlC,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADD,GAEGH,KAAK,CAACK,MAAN,KAAiB,CAAjB,GACF,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,GAGFL,KAAK,CAACM,GAAN,CAAWC,IAAD,IACR;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAmB,IAAA,SAAS,EAAC,wBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAED,IAAI,CAACE,QADb;AAEE,IAAA,MAAM,EAAC,QAFT;AAGE,IAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IAAI,CAACG,IALR,CADF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CAVF,CADF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUJ,IAAI,CAACK,gBADf,CADF,EAIE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaL,IAAI,CAACM,cADlB,CAJF,EAOE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0CN,IAAI,CAACO,WAA/C,CAPF,CADF,CAbF,CADF,CAPJ,CADF;AAsCD,CAlDD;;AAoDAhB,aAAa,CAACiB,SAAd,GAA0B;AACxBhB,EAAAA,QAAQ,EAAEP,SAAS,CAACwB,MAAV,CAAiBC;AADH,CAA1B;;AAIA,MAAMC,eAAe,GAAIjB,KAAD,KAAY;AAClCC,EAAAA,OAAO,EAAED,KAAK,CAACC;AADmB,CAAZ,CAAxB;;AAIA,eAAeT,OAAO,CAACyB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({ username }) => {\n  const repos = useSelector((state) => state.profile.repos);\n  const loading = useSelector((state) => state.profile.loading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getGithubRepos(username));\n    // eslint-disable-next-line\n  }, [getGithubRepos, username]);\n\n  // all this data is coming from the Github API and not the Mongo database\n  return (\n    <div className=\"profile-github\">\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\n      {repos.length === 0 && loading === false ? (\n        <h4>No repos for this account</h4>\n      ) : repos.length === 0 ? (\n        <Spinner />\n      ) : (\n        repos.map((repo) => (\n          <div key={repo.id} className=\"repo bg-white p-1 my-1\">\n            <div>\n              <h4>\n                <a\n                  href={repo.html_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {repo.name}\n                </a>\n              </h4>\n              <p>{repo.description}</p>\n            </div>\n            <div>\n              <ul>\n                <li className=\"badge badge-primary\">\n                  Stars: {repo.stargazers_count}\n                </li>\n                <li className=\"badge badge-dark\">\n                  Watchers: {repo.watchers_count}\n                </li>\n                <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\n              </ul>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}