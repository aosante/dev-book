{"ast":null,"code":"var _jsxFileName = \"/Users/andresosante/Aosante/Web Portfolio/DevBook/client/src/components/profile/ProfileGithub.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  profile: {\n    repos,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos, username]); // all this data is coming from the Github API and not the Mongo database\n\n  return React.createElement(\"div\", {\n    className: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Github Repos\"), repos.length === 0 && loading === false ? React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"No repos for this account\") : repos.length === 0 ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo.id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, repo.name)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, repo.description)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Stars: \", repo.stargazers_count), React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Watchers: \", repo.watchers_count), React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Forks: \", repo.forks_count))))));\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["/Users/andresosante/Aosante/Web Portfolio/DevBook/client/src/components/profile/ProfileGithub.jsx"],"names":["React","useEffect","PropTypes","connect","getGithubRepos","Spinner","ProfileGithub","username","profile","repos","loading","length","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","func","isRequired","object","string","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBH,EAAAA,cAFqB;AAGrBI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAHY,CAAD,KAIhB;AACJT,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,cAAc,CAACG,QAAD,CAAd;AACD,GAFQ,EAEN,CAACH,cAAD,EAAiBG,QAAjB,CAFM,CAAT,CADI,CAKJ;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGE,KAAK,CAACE,MAAN,KAAiB,CAAjB,IAAsBD,OAAO,KAAK,KAAlC,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADD,GAEGD,KAAK,CAACE,MAAN,KAAiB,CAAjB,GACF,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,GAGFF,KAAK,CAACG,GAAN,CAAUC,IAAI,IACZ;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAmB,IAAA,SAAS,EAAC,wBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAED,IAAI,CAACE,QADb;AAEE,IAAA,MAAM,EAAC,QAFT;AAGE,IAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IAAI,CAACG,IALR,CADF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CAVF,CADF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUJ,IAAI,CAACK,gBADf,CADF,EAIE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaL,IAAI,CAACM,cADlB,CAJF,EAOE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0CN,IAAI,CAACO,WAA/C,CAPF,CADF,CAbF,CADF,CAPJ,CADF;AAsCD,CAhDD;;AAkDAd,aAAa,CAACe,SAAd,GAA0B;AACxBjB,EAAAA,cAAc,EAAEF,SAAS,CAACoB,IAAV,CAAeC,UADP;AAExBf,EAAAA,OAAO,EAAEN,SAAS,CAACsB,MAAV,CAAiBD,UAFF;AAGxBhB,EAAAA,QAAQ,EAAEL,SAAS,CAACuB,MAAV,CAAiBF;AAHH,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCnB,EAAAA,OAAO,EAAEmB,KAAK,CAACnB;AADiB,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  profile: { repos, loading }\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos, username]);\n\n  // all this data is coming from the Github API and not the Mongo database\n  return (\n    <div className=\"profile-github\">\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\n      {repos.length === 0 && loading === false ? (\n        <h4>No repos for this account</h4>\n      ) : repos.length === 0 ? (\n        <Spinner />\n      ) : (\n        repos.map(repo => (\n          <div key={repo.id} className=\"repo bg-white p-1 my-1\">\n            <div>\n              <h4>\n                <a\n                  href={repo.html_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {repo.name}\n                </a>\n              </h4>\n              <p>{repo.description}</p>\n            </div>\n            <div>\n              <ul>\n                <li className=\"badge badge-primary\">\n                  Stars: {repo.stargazers_count}\n                </li>\n                <li className=\"badge badge-dark\">\n                  Watchers: {repo.watchers_count}\n                </li>\n                <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\n              </ul>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}